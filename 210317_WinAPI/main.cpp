// main.cpp
#include "config.h"
#include "MainGame.h"

// 전역변수
// 인스턴스 : 객체 메모리상에 존재하는 객체
HINSTANCE g_hInstance;		// 프로그램 인스턴스 핸들
HWND g_hWnd;				// 윈도우 핸들
LPSTR g_lpszClass = (LPSTR)TEXT("윈메인의 시작");
MainGame g_mainGame;

void SetClientTect(HWND hWnd, int width, int height);

LRESULT CALLBACK WndProc(HWND hWnd, UINT iMessage, WPARAM wParam, LPARAM lParam);

int APIENTRY WinMain(HINSTANCE _hInstance, HINSTANCE _hPrevInstance,
	LPSTR _lpszCmdParam, int nCmdShow)
{
	g_hInstance = _hInstance;

	// 윈도우를 생성하기 위한 기본셋팅
	WNDCLASSEX wndClass;
	wndClass.cbSize = sizeof(WNDCLASSEX);

	wndClass.cbClsExtra = 2068;
	wndClass.cbWndExtra = 2068;
	wndClass.hbrBackground = (HBRUSH)GetStockObject(LTGRAY_BRUSH);
	wndClass.hCursor = LoadCursor(NULL, IDC_ARROW);
	wndClass.hIcon = LoadIcon(NULL, IDI_APPLICATION);
	wndClass.hInstance = g_hInstance;
	wndClass.lpfnWndProc = WndProc;
	wndClass.lpszClassName = g_lpszClass;
	wndClass.lpszMenuName = NULL;
	wndClass.style = CS_HREDRAW | CS_VREDRAW;
	wndClass.hIconSm = LoadIcon(wndClass.hInstance, MAKEINTRESOURCE(IDI_SHIELD));

	// 윈도우 클래스 등록
	RegisterClassEx(&wndClass);

	// 윈도우 생성
	g_hWnd = CreateWindowEx(WS_EX_TOOLWINDOW, g_lpszClass, g_lpszClass,
		WS_OVERLAPPEDWINDOW,
		50, 50, WINSIZE_X, WINSIZE_Y,
		NULL, NULL, g_hInstance, NULL);

	// 윈도우 출력
	ShowWindow(g_hWnd, nCmdShow);

	SetClientTect(g_hWnd, WINSIZE_X, WINSIZE_Y);

	TimerManager::GetSingleton()->Init();
	
	if (FAILED(g_mainGame.Init()))
	{
		MessageBox(g_hWnd, "메인 게임 초기화 실패!!", "경고", MB_OK);
		//return 0;
	}

	// 메시지 큐에 있는 메시지 처리
	MSG message;
	while (true)
	{
		if (PeekMessage(&message, 0, 0, 0, PM_REMOVE))	// 메세지가 있으면 메세지 처리
		{
			if (message.message == WM_QUIT)
			{
				break;
			}
			else
			{
				TranslateMessage(&message);
				DispatchMessage(&message);
			}
		}
		else											// 메세시가 없으면 game 업데이트
		{
			//htimer가 아니라 cpu timer를 사용하기 위함
			TimerManager::GetSingleton()->Update();
			g_mainGame.Update();
			
			g_mainGame.Render();
		}
	}

	/*while (GetMessage(&message, 0, 0, 0))
	{
		TranslateMessage(&message);
		DispatchMessage(&message);
	}*/

	g_mainGame.Release();

	return message.wParam;
}

LRESULT CALLBACK WndProc(HWND hWnd, UINT iMessage, WPARAM wParam, LPARAM lParam)
{
	return g_mainGame.MainProc(hWnd, iMessage, wParam, lParam);
}

//0,0 부분에 있는 메뉴바가 결과값을 가리는 것을 막기 위한 장치
void SetClientTect(HWND hWnd, int width, int height)
{
	RECT crt;
	DWORD style, exStyle;

	SetRect(&crt, 0, 0, width, height);											//crt에 셋팅되어있는(사용하고 싶은) rect 정보 저장
	style = GetWindowLong(hWnd, GWL_STYLE);										//원래 있던 윈도우 스타일을 가져온다
	exStyle = GetWindowLong(hWnd, GWL_EXSTYLE);									//(이전 버전을 위해 필요한 정보)
	AdjustWindowRectEx(&crt, style, GetMenu(hWnd) != NULL, exStyle);			//지금 스타일에 맞춰서 rect값을 다시 가져다 주는 함수

	if (style & WS_VSCROLL) crt.right += GetSystemMetrics(SM_CXVSCROLL);		//오른쪽에 스크롤 바 생기면 그 크기만큼 추가
	if (style & WS_VSCROLL) crt.bottom += GetSystemMetrics(SM_CXHSCROLL);		//아래쪽에 스크롤 바 생기면 그 크기만큼 추가

	SetWindowPos(hWnd, NULL, 0, 0, crt.right - crt.left, crt.bottom - crt.top,
		SWP_NOMOVE | SWP_NOZORDER);

}